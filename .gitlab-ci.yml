image: python:3.10-slim

variables:
  DOCKER_REGISTRY: ${CI_REGISTRY}

stages:
  - test
  - build
  - deploy

.env-prod: &env-prod
  variables:
    JIRA_API_KEY: ${PROD_JIRA_API_KEY}
    JIRA_USERNAME: ${PROD_JIRA_USERNAME}
    TEMPO_CLIENT_ID: ${PROD_TEMPO_CLIENT_ID}
    TEMPO_SECRET_ID: ${PROD_TEMPO_SECRET_ID}
    TEMPO_ACCESS_TOKEN: ${PROD_TEMPO_ACCESS_TOKEN}
    DB_NAME: ${PROD_DB_NAME}
    DB_USER: ${PROD_DB_USER}
    DB_PASSWORD: ${PROD_DB_PASSWORD}
    DB_HOST: ${PROD_DB_HOST}

test:
  stage: test
  script:
    - apt-get update && apt-get install -y python3-pip
    - pip install -r requirements.txt
    - python -m unittest discover -v tests/
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == "main"

build:
  stage: build
  image: docker:latest
  services:
    - docker:dind
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker build -t $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA .
    - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
    - docker tag $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA $CI_REGISTRY_IMAGE:latest
    - docker push $CI_REGISTRY_IMAGE:latest
  rules:
    - if: $CI_COMMIT_BRANCH == "main"

deploy:
  stage: deploy
  <<: *env-prod
  script:
    - apt-get update && apt-get install -y openssh-client
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan $PROD_HOST >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
    - ssh $PROD_HOST "docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY"
    - ssh $PROD_HOST "docker pull $CI_REGISTRY_IMAGE:latest"
    - ssh $PROD_HOST "docker-compose down"
    - ssh $PROD_HOST "docker-compose up -d"
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
  environment:
    name: production
